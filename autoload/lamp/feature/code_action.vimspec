let s:Promise = vital#lamp#import('Async.Promise')
let s:expect = themis#helper('expect')

Describe lamp#feature#code_action

  Before each
    let s:server = lamp#register('typescript-language-server', {
          \   'command': [lamp#config('global.root') . '/node_modules/.bin/typescript-language-server', '--stdio'],
          \   'filetypes': ['typescript', 'typescript.tsx'],
          \   'root_uri': { -> lamp#config('global.root') . '/misc/typescript/' }
          \ })
    call lamp#sync(s:server.start())
    call lamp#sync(s:server.initialize(bufnr('%')))
    call lamp#view#buffer#reset()
  End

  After each
    call lamp#sync(s:server.stop())
    call lamp#view#buffer#reset()
  End

  It Should run code action
    call lamp#view#buffer#open('vsplit', {
          \   'filename': lamp#config('global.root') . '/misc/typescript/src/index.ts',
          \   'lnum': 3,
          \   'col': 1
          \ })
    set filetype=typescript

    let l:bufnr = bufnr('%')
    let l:uri = lamp#protocol#document#encode_uri(l:bufnr)

    " wait for diagnostic.
    call s:server.ensure_document(l:bufnr)
    call lamp#sync({ -> len(get(s:server.diagnostics, l:uri, { 'applied_diagnostics': [] }).applied_diagnostics) > 0 })

    let l:buflines = getbufline(l:bufnr, 3)
    call lamp#feature#code_action#test({ 'action_index': 0 })
    call lamp#feature#code_action#do({})
    call lamp#sync({ -> getbufline(l:bufnr, 3) != l:buflines })
    call s:expect(['']).to_equal(getbufline(l:bufnr, 3))
  End

End

