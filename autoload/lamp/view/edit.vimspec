let s:Promise = vital#lamp#import('Async.Promise')
let s:expect = themis#helper('expect')

function! s:buffer(lines) abort
  let l:lines = split(a:lines, "\n", v:true)
  enew
  put!=l:lines
  normal! Gdd
endfunction

function! s:edits(lines, edits, ...) abort
  " init buffer.
  call s:buffer(a:lines)

  " apply edits.
  call lamp#view#edit#apply(bufnr('%'), map(a:edits, { k, v -> {
        \   'range': {
        \     'start': { 'line': v.start[0], 'character': v.start[1] },
        \     'end': { 'line': v.end[0], 'character': v.end[1] },
        \   },
        \   'newText': v.text
        \ } }))

  " check.
  if len(a:000) > 0
    call s:expect(split(a:000[0], "\n", v:true)).to_equal(getline('^', '$'))
  endif
endfunction

Describe lamp#view#edit

  After each
    call lamp#view#buffer#reset()
  End

  It Should apply workspace edit
    set hidden
    let s:filepath1 = lamp#config('root') . '/fixture/typescript-fixture/src/index.ts'
    let s:fileuri1 = lamp#protocol#document#encode_uri(s:filepath1)
    let s:filepath2 = lamp#config('root') . '/fixture/typescript-fixture/src/module1.ts'
    let s:fileuri2 = lamp#protocol#document#encode_uri(s:filepath2)
    let s:workspace_edit = {
          \   'changes': {},
          \   'documentChanges': []
          \ }
    let s:workspace_edit.changes[s:fileuri1] = [{
          \   'range': {
          \     'start': {
          \       'line': 0,
          \       'character': 9
          \     },
          \     'end': {
          \       'line': 0,
          \       'character': 16
          \     },
          \   },
          \   'newText': 'module2'
          \ }, {
          \   'range': {
          \     'start': {
          \       'line': 4,
          \       'character': 0
          \     },
          \     'end': {
          \       'line': 4,
          \       'character': 7
          \     },
          \   },
          \   'newText': 'module2'
          \ }]
    let s:workspace_edit.documentChanges = [{
          \   'textDocument': { 'uri': s:fileuri2 },
          \   'edits': [{
          \     'range': {
          \       'start': {
          \         'line': 0,
          \         'character': 13
          \       },
          \       'end': {
          \         'line': 0,
          \         'character': 20
          \       },
          \     },
          \     'newText': 'module2'
          \   }]
          \ }]
    call lamp#view#edit#apply_workspace(lamp#view#edit#normalize_workspace_edit(s:workspace_edit))
    call s:expect(getbufline(bufnr(s:filepath1), '^', '$')[0]).to_equal("import { module2 } from './module1';")
    call s:expect(getbufline(bufnr(s:filepath1), '^', '$')[4]).to_equal("module2();")
    call s:expect(getbufline(bufnr(s:filepath2), '^', '$')[0]).to_equal("export const module2 = () => {")
  End

" TODO: Should support
"  It Should keep cursor position (before)
"    call s:buffer("abcdefg\nhijklmn\nopqrstu")
"    call setpos('.', [bufnr('%'), 2, 4, 0])
"    call lamp#view#edit#apply(bufnr('%'), [{
"          \   'range': {
"          \     'start': { 'line': 0, 'character': 0 },
"          \     'end': { 'line': 1, 'character': 0 }
"          \   },
"          \   'newText': "1\n2345"
"          \ }])
"    call s:expect(getpos('.')[1 : -1]).to_equal([2, 9, 0])
"  End
"
"  It Should keep cursor position (included cursor oneline)
"    call s:buffer("abcdefg\nhijklmn\nopqrstu")
"    call setpos('.', [bufnr('%'), 2, 4, 0])
"    call lamp#view#edit#apply(bufnr('%'), [{
"          \   'range': {
"          \     'start': { 'line': 1, 'character': 0 },
"          \     'end': { 'line': 1, 'character': 7 }
"          \   },
"          \   'newText': "1"
"          \ }])
"    call s:expect(getpos('.')[1 : -1]).to_equal([2, 1, 0])
"  End
"
"  It Should keep cursor position (included cursor multiline)
"    call s:buffer("abcdefg\nhijklmn\nopqrstu")
"    call setpos('.', [bufnr('%'), 2, 4, 0])
"    call lamp#view#edit#apply(bufnr('%'), [{
"          \   'range': {
"          \     'start': { 'line': 1, 'character': 0 },
"          \     'end': { 'line': 1, 'character': 7 }
"          \   },
"          \   'newText': "1"
"          \ }])
"    call s:expect(getpos('.')[1 : -1]).to_equal([2, 1, 0])
"  End

  " @see https://github.com/microsoft/vscode-languageserver-node/blob/master/textDocument/src/test/edits.test.ts

  It Should edit inserts 1
    call s:edits("012345678901234567890123456789", [{
          \   'start': [0, 0],
          \   'end': [0, 0],
          \   'text': 'Hello'
          \ }], "Hello012345678901234567890123456789")
  End

  It Should edit inserts 2
    call s:edits("012345678901234567890123456789", [{
          \   'start': [0, 1],
          \   'end': [0, 1],
          \   'text': 'Hello'
          \ }], "0Hello12345678901234567890123456789")
  End

  It Should edit inserts 3
    call s:edits("012345678901234567890123456789", [{
          \   'start': [0, 1],
          \   'end': [0, 1],
          \   'text': 'Hello'
          \ },{
          \   'start': [0, 1],
          \   'end': [0, 1],
          \   'text': 'World'
          \ }], "0HelloWorld12345678901234567890123456789")
  End

  It Should edit inserts 4
    call s:edits("012345678901234567890123456789", [{
          \   'start': [0, 2],
          \   'end': [0, 2],
          \   'text': 'One'
          \ },{
          \   'start': [0, 1],
          \   'end': [0, 1],
          \   'text': 'Hello'
          \ },{
          \   'start': [0, 1],
          \   'end': [0, 1],
          \   'text': 'World'
          \ },{
          \   'start': [0, 2],
          \   'end': [0, 2],
          \   'text': 'Two'
          \ },{
          \   'start': [0, 2],
          \   'end': [0, 2],
          \   'text': 'Three'
          \ }], "0HelloWorld1OneTwoThree2345678901234567890123456789")
  End

  It Should edit replaces 1
    call s:edits("012345678901234567890123456789", [{
          \   'start': [0, 3],
          \   'end': [0, 6],
          \   'text': 'Hello'
          \ }], "012Hello678901234567890123456789")
  End

  It Should edit replaces 2
    call s:edits("012345678901234567890123456789", [{
          \   'start': [0, 3],
          \   'end': [0, 6],
          \   'text': 'Hello'
          \ }, {
          \   'start': [0, 6],
          \   'end': [0, 9],
          \   'text': 'World'
          \ }], "012HelloWorld901234567890123456789")
  End

  It Should edit replaces 3
    call s:edits("012345678901234567890123456789", [{
          \   'start': [0, 3],
          \   'end': [0, 6],
          \   'text': 'Hello'
          \ }, {
          \   'start': [0, 6],
          \   'end': [0, 6],
          \   'text': 'World'
          \ }], "012HelloWorld678901234567890123456789")
  End

  It Should edit replaces 4
    call s:edits("012345678901234567890123456789", [{
          \   'start': [0, 6],
          \   'end': [0, 6],
          \   'text': 'World'
          \ }, {
          \   'start': [0, 3],
          \   'end': [0, 6],
          \   'text': 'Hello'
          \ }], "012HelloWorld678901234567890123456789")
  End

  It Should edit replaces 5
    call s:edits("012345678901234567890123456789", [{
          \   'start': [0, 3],
          \   'end': [0, 3],
          \   'text': 'World'
          \ }, {
          \   'start': [0, 3],
          \   'end': [0, 6],
          \   'text': 'Hello'
          \ }], "012WorldHello678901234567890123456789")
  End

  It Should edit multiline 1
    call s:edits("0\n1\n2\n3\n4", [{
          \   'start': [2, 0],
          \   'end': [3, 0],
          \   'text': 'Hello'
          \ }, {
          \   'start': [1, 1],
          \   'end': [1, 1],
          \   'text': 'World'
          \ }], "0\n1World\nHello3\n4")
  End

  It Should throw overlap error 1
    let s:catch = v:false
    try
      call s:edits("012345678901234567890123456789", [{
            \   'start': [0, 3],
            \   'end': [0, 6],
            \   'text': 'Hello'
            \ }, {
            \   'start': [0, 3],
            \   'end': [0, 3],
            \   'text': 'World'
            \ }])
    catch /.*/
      let s:catch = v:true
    endtry
    call s:expect(s:catch).to_equal(v:true)
  End

  It Should throw overlap error 2
    let s:catch = v:false
    try
      call s:edits("012345678901234567890123456789", [{
            \   'start': [0, 3],
            \   'end': [0, 6],
            \   'text': 'Hello'
            \ }, {
            \   'start': [0, 3],
            \   'end': [0, 4],
            \   'text': 'World'
            \ }])
    catch /.*/
      let s:catch = v:true
    endtry
    call s:expect(s:catch).to_equal(v:true)
  End

End

