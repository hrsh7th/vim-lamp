let s:expect = themis#helper('expect')

for s:Diff in [lamp#view#diff#import(), lamp#view#diff#compat#import()]
  Describe lamp#view#diff

    Before each
      if exists('s:diff')
        call s:diff.detach(s:bufnr)
      endif
      let s:bufnr = bufadd('diffkit')
      let s:diff = s:Diff.new()
      execute printf('%sbuffer', s:bufnr)
    End

    Describe #compute

      It Should compute diff 1
        %delete _
        call setline(1, ['one', 'two', 'three'])
        call s:diff.attach(s:bufnr)

        " update 1 (one, a, b, c, two, three)
        call append(1, ['a', 'b', 'c'])
        sleep 100m
        call s:expect(s:diff.compute(s:bufnr)).to_equal(lamp#view#diff#compute(
              \   ['one', 'two', 'three'],
              \   getline('^', '$')
              \ ))

        " update 2 (one, a, two, three)
        call deletebufline(s:bufnr, 3, 4)
        sleep 100m
        call s:expect(s:diff.compute(s:bufnr)).to_equal(lamp#view#diff#compute(
              \   ['one', 'a', 'b', 'c', 'two', 'three'],
              \   getline('^', '$')
              \ ))
      End

    End

    Describe #_on_change

      It Should sync diff lines 1
        if s:diff.type !=# 'compat'
          " init
          %delete _
          call setline(1, ['one', 'two', 'three'])
          call s:diff.attach(s:bufnr)
          let s:d = s:diff.bufs[s:bufnr].diff

          " update 1 (one, a, b, c, two, three)
          call append(1, ['a', 'b', 'c'])
          call s:diff.flush(s:bufnr)
          call s:expect(s:d.old).to_equal({
                \   'start': 2,
                \   'end': 2
                \ })
          call s:expect(s:d.new).to_equal({
                \   'start': 2,
                \   'end': 5
                \ })

          " update 2 (one, a, two, three)
          call deletebufline(s:bufnr, 3, 4)
          call s:diff.flush(s:bufnr)
          call s:expect(s:d.old).to_equal({
                \   'start': 2,
                \   'end': 2
                \ })
          call s:expect(s:d.new).to_equal({
                \   'start': 2,
                \   'end': 3
                \ })

          " update 3 (one, a, two, b, c, three)
          call append(3, ['b', 'c'])
          call s:diff.flush(s:bufnr)
          call s:expect(s:d.old).to_equal({
                \   'start': 2,
                \   'end': 3
                \ })
          call s:expect(s:d.new).to_equal({
                \   'start': 2,
                \   'end': 6
                \ })

          " update 4 (0, one, a, two, b, c, three)
          call append(0, ['0'])
          call s:diff.flush(s:bufnr)
          call s:expect(s:d.old).to_equal({
                \   'start': 1,
                \   'end': 3
                \ })
          call s:expect(s:d.new).to_equal({
                \   'start': 1,
                \   'end': 7
                \ })

          " update 5 (0, three)
          call deletebufline(s:bufnr, 2, 6)
          call s:diff.flush(s:bufnr)
          call s:expect(s:d.old).to_equal({
                \   'start': 1,
                \   'end': 3
                \ })
          call s:expect(s:d.new).to_equal({
                \   'start': 1,
                \   'end': 2
                \ })

          " update 7 (0)
          call deletebufline(s:bufnr, 2, 2)
          call s:diff.flush(s:bufnr)
          call s:expect(s:d.old).to_equal({
                \   'start': 1,
                \   'end': 4
                \ })
          call s:expect(s:d.new).to_equal({
                \   'start': 1,
                \   'end': 2
                \ })

          " update 8 (0, a, b, c)
          call append(1, ['a', 'b', 'c'])
          call s:diff.flush(s:bufnr)
          call s:expect(s:d.old).to_equal({
                \   'start': 1,
                \   'end': 4
                \ })
          call s:expect(s:d.new).to_equal({
                \   'start': 1,
                \   'end': 5
                \ })
        endif
      End

    End

  End
endfor
