let s:Floatwin = lamp#view#floatwin#import()
let s:expect = themis#helper('expect')

Describe lamp#view#floatwin

  After each
    call lamp#view#buffer#reset()
  End

  It Should compat layer has same api
    execute printf('source %s/%s', lamp#config('root'), 'autoload/lamp/view/floatwin/nvim.vim')
    execute printf('source %s/%s', lamp#config('root'), 'autoload/lamp/view/floatwin/vim.vim')

    for s:namespace in ['nvim', 'vim']
      for [s:function, s:args] in items({
            \   'show': ['floatwin'],
            \   'hide': ['floatwin'],
            \   'enter': ['floatwin'],
            \   'write': ['floatwin', 'lines'],
            \   'is_showing': ['floatwin'],
            \   'winnr': ['floatwin']
            \ })
        call s:expect(printf('*lamp#view#floatwin#%s#%s', s:namespace, s:function)).to_exist()
      endfor
    endfor
  End

  It Should return is_showing
    if has('nvim')
      let s:floatwin = s:Floatwin.new({})
      call s:expect(s:floatwin.is_showing()).to_equal(v:false)

      call s:floatwin.show([1, 1], [{ 'lines': ['test'] }])
      call s:expect(s:floatwin.is_showing()).to_equal(v:true)

      call s:floatwin.hide()
      call s:expect(s:floatwin.is_showing()).to_equal(v:false)

      " force close (no use `s:floatwin.hide()`).
      call s:floatwin.show([1, 1], [{ 'lines': ['test'] }])
      call lamp#view#window#do(win_getid(s:floatwin.winnr()), { -> execute('close') })
      call s:expect(s:floatwin.is_showing()).to_equal(v:false)
    else
      let s:floatwin = s:Floatwin.new({})
      call s:expect(s:floatwin.is_showing()).to_equal(v:false)

      call s:floatwin.show([1, 1], [{ 'lines': ['test'] }])
      call s:expect(s:floatwin.is_showing()).to_equal(v:true)

      call s:floatwin.hide()
      call s:expect(s:floatwin.is_showing()).to_equal(v:false)
    endif
  End

  It Should show multiple content
    let s:floatwin = s:Floatwin.new({})
    call s:floatwin.show([1, 1], [
          \   { 'lines': ['Error from typescript'] },
          \   { 'lines': ['Error from prettier'] }
          \ ])
    call s:expect(getbufline(s:floatwin.bufnr, '^', '$')).to_equal([
          \   'Error from typescript',
          \   '――――――――――',
          \   'Error from prettier'
          \ ])
    call s:floatwin.hide()
  End

  It Should enter
    if has('nvim')
      let s:floatwin = s:Floatwin.new({})
      call s:floatwin.show([1, 1], [{ 'lines': ['1234567890'] }])
      let s:winnr = winnr()
      call s:floatwin.enter()
      call s:expect(s:winnr).not.to_equal(winnr())
    else
      call themis#log('[SKIP] nvim only test.')
    endif
  End

End

