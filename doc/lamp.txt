*vim-lamp* *lamp*

Language Server Protocol Client in Vim.


==============================================================================
CONTENTS                                                       *lamp-contents*

INTRODUCTION                                                      |lamp-intro|
INSTALL                                                         |lamp-install|
MAPPING                                                         |lamp-mapping|
EXAMPLE                                                         |lamp-example|
FAQ                                                                 |lamp-faq|
CHANGELOG                                                     |lamp-changelog|

==============================================================================
INSTALL                                                         *lamp-install*

You can use your favorite plugin manage for install `vim-lamp`.
The below settings uses dein.nvim.

>
  call dein#add('hrsh7th/vim-lamp')
<


==============================================================================
MAPPING                                                         *lamp-mapping*

Normal Mode~

>
  <Plug>(lamp-definition)
  <Plug>(lamp-definition-split)
  <Plug>(lamp-definition-vsplit)
  <Plug>(lamp-hover)
  <Plug>(lamp-rename)
  <Plug>(lamp-references)
  <Plug>(lamp-code-action)
<


Visual Mode~

>
  <Plug>(lamp-code-action)
<



==============================================================================
EXAMPLE                                                         *lamp-example*


>
  set hidden
  set ambiwidth=double

  augroup vimrc
    autocmd!
  augroup END

  autocmd! vimrc User lamp#initialized * call s:on_initialized()
  function! s:on_initialized()
    call lamp#register('typescript-language-server', {
        \   'command': ['typescript-language-server', '--stdio'],
        \   'filetypes': ['typescript', 'javascript', 'typescript.tsx', 'javascript.jsx'],
        \   'root_uri': { -> vimrc#get_project_root() },
        \   'initialization_options': { -> {} },
        \ })
  endfunction

  autocmd! vimrc User lamp#text_document_did_open call s:on_text_document_did_open()
  function! s:on_text_document_did_open() abort
    nmap <buffer> gf<CR>       <Plug>(lamp-definition)
    nmap <buffer> gfs          <Plug>(lamp-definition-split)
    nmap <buffer> gfv          <Plug>(lamp-definition-vsplit)

    nmap <buffer> tgf<CR>      <Plug>(lamp-type-definition)
    nmap <buffer> tgfs         <Plug>(lamp-type-definition-split)
    nmap <buffer> tgfv         <Plug>(lamp-type-definition-vsplit)

    nmap <buffer> dgf<CR>      <Plug>(lamp-declaration)
    nmap <buffer> dgfs         <Plug>(lamp-declaration-split)
    nmap <buffer> dgfv         <Plug>(lamp-declaration-vsplit)

    nmap <buffer> igf<CR>      <Plug>(lamp-implementation)
    nmap <buffer> igfs         <Plug>(lamp-implementation-split)
    nmap <buffer> igfv         <Plug>(lamp-implementation-vsplit)

    nmap <buffer> <Leader>i    <Plug>(lamp-hover)

    nmap <buffer> <Leader>r    <Plug>(lamp-rename)

    nmap <buffer> <Leader>g    <Plug>(lamp-references)

    nmap <buffer> <Leader>f    <Plug>(lamp-formatting)
    vmap <buffer> <Leader>f    <Plug>(lamp-range-formatting)

    nmap <buffer> <Leader><CR> <Plug>(lamp-code-action)
    vmap <buffer> <Leader><CR> <Plug>(lamp-code-action)

    setlocal omnifunc=lamp#complete
  endfunction
<



==============================================================================
FAQ                                                                 *lamp-faq*

Q.
  How to enable auto completion with lamp?
A.
  If you use `deoplete.nvim`, you can use `deoplete-lamp`.
  If you want to use `omnifunc`, you can use `setlocal omnifunc=lamp#complete` .



==============================================================================
CHANGELOG                                                     *lamp-changelog*

2019/10/30~
- Publish.

